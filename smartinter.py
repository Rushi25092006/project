# -*- coding: utf-8 -*-
"""smartinter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19GxDKaUWGF1mXGDZ_8HOMo9lgwX4YHEm
"""

import os
import pandas as pd
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import seaborn as sns
import cv2
from tensorflow.keras.models import load_model
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from tensorflow.keras.preprocessing.image import ImageDataGenerator

import os
import pandas as pd
data_dir = 'C://Users//ronga//Downloads//archive//dataset2-master//dataset2-master//images//TRAIN'
class_labels = ['EOSINOPHIL', 'LYMPHOCYTE', 'MONOCYTE', 'NEUTROPHIL']
filepaths = []
labels = []
for label in class_labels:
    class_dir = os.path.join(data_dir, label)
    if not os.path.exists(class_dir):
        print(f"Folder not found: {class_dir}")
        continue
    for file in os.listdir(class_dir):
        if file.lower().endswith(('.jpeg', '.png')):
            filepaths.append(os.path.join(class_dir, file))
            labels.append(label.lower())

bloodCell_df = pd.DataFrame({
    'filepaths': filepaths,
    'labels': labels
})

bloodCell_df = bloodCell_df.sample(frac=1).reset_index(drop=True)

bloodCell_df.head()

from google.colab import files
uploaded = files.upload()

import zipfile
import os

# Replace 'archive.zip' with your actual file name if different
with zipfile.ZipFile("archive.zip", 'r') as zip_ref:
    zip_ref.extractall("/content/")

# List contents to check where TRAIN folder is
os.listdir('/content/')

train_dir = '/content/dataset2-master/dataset2-master/images/TRAIN'

from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale=1./255)

train = train_datagen.flow_from_directory(
    train_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='categorical'
)

import matplotlib.pyplot as plt
import numpy as np

def show_blood_cell_images(image_gen):
    class_dict = image_gen.class_indices
    classes = list(class_dict.keys())

    images, labels = next(image_gen)
    plt.figure(figsize=(20, 20))

    r = min(len(labels), 25)

    for i in range(r):
        plt.subplot(5, 5, i + 1)
        plt.imshow(images[i])
        index = np.argmax(labels[i])
        plt.title(classes[index], color="green", fontsize=16)
        plt.axis('off')

    plt.show()

show_blood_cell_images(train)

images, labels = next(train)
print(images.shape)  # Expect: (batch_size, height, width, 3)

ImageDataGenerator(rescale=1./255)

import os

for class_name in os.listdir(train_dir):
    class_path = os.path.join(train_dir, class_name)
    if os.path.isdir(class_path):
        print(f"{class_name}: {len(os.listdir(class_path))} images")

from sklearn.utils.class_weight import compute_class_weight

import os

# Explore the EOSINOPHIL class directory
eos_dir = '/content/dataset2-master/dataset2-master/images/TRAIN/EOSINOPHIL'

# List a few image files
print(os.listdir(eos_dir)[:5])  # show first 5 image names

from PIL import Image

img_path = '/content/dataset2-master/dataset2-master/images/TRAIN/EOSINOPHIL/_0_991.jpeg'
img = Image.open(img_path)
img = img.resize((150, 150))
img.show()

for file in os.listdir(eos_dir):
    full_path = os.path.join(eos_dir, file)
    print(full_path)

images, labels = next(train)
print(images.shape)  # Expect: (batch_size, height, width, 3)

ImageDataGenerator(rescale=1./255)

import os

for class_name in os.listdir(train_dir):
    class_path = os.path.join(train_dir, class_name)
    if os.path.isdir(class_path):
        print(f"{class_name}: {len(os.listdir(class_path))} images")

from sklearn.utils.class_weight import compute_class_weight

from PIL import Image
img = Image.open('/content/dataset2-master/dataset2-master/images/TRAIN/EOSINOPHIL/_0_991.jpeg')
img = img.resize((150, 150))
img.show()

ImageDataGenerator(
    rescale=1./255,
    rotation_range=15,
    zoom_range=0.1,
    horizontal_flip=True
)

ImageDataGenerator(validation_split=0.2)

print(bloodCell_df.shape)
print(bloodCell_df.head())

print("Filepaths length:", len(filepaths))
print("Labels length:", len(labels))

import os

data_dir = '/content/dataset2-master/dataset2-master/images/TRAIN'
class_labels = ['EOSINOPHIL', 'LYMPHOCYTE', 'MONOCYTE', 'NEUTROPHIL']

filepaths = []
labels = []

for label in class_labels:
    class_path = os.path.join(data_dir, label)
    print(f"Looking inside: {class_path}")

    if not os.path.exists(class_path):
        print(f"‚ùå Missing folder: {class_path}")
        continue  # skip if folder doesn't exist

    for file in os.listdir(class_path):
        if file.lower().endswith(('.jpg', '.jpeg', '.png')):
            full_path = os.path.join(class_path, file)
            filepaths.append(full_path)
            labels.append(label)

print("Collected:", len(filepaths), "images")
print("Example path:", filepaths[0] if filepaths else "No files found.")

import pandas as pd

bloodCell_df = pd.DataFrame({
    'filepaths': filepaths,
    'labels': labels
})

print(bloodCell_df.shape)
bloodCell_df.head()

from sklearn.model_selection import train_test_split

# Split into test and train
train_images, test_images = train_test_split(bloodCell_df, test_size=0.3, random_state=42)

# Further split train into train and validation
train_set, val_set = train_test_split(train_images, test_size=0.2, random_state=42)

# Check shapes
print(train_set.shape)    # (7965, 2)
print(test_images.shape)  # (2988, 2)
print(val_set.shape)      # (1992, 2)
print(train_images.shape) # (9969, 2)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf

image_gen = ImageDataGenerator(preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input)

train = image_gen.flow_from_dataframe(
    dataframe=train_set,
    x_col="filepaths", y_col="labels",
    target_size=(244, 244),
    color_mode="rgb",
    class_mode="categorical",
    batch_size=8,
    shuffle=False
)

test = image_gen.flow_from_dataframe(
    dataframe=test_images,
    x_col="filepaths", y_col="labels",
    target_size=(244, 244),
    color_mode="rgb",
    class_mode="categorical",
    batch_size=8,
    shuffle=False
)

val = image_gen.flow_from_dataframe(
    dataframe=val_set,
    x_col="filepaths", y_col="labels",
    target_size=(244, 244),
    color_mode="rgb",
    class_mode="categorical",
    batch_size=8,
    shuffle=False
)

from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import Adam

# Load base model without top
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(244, 244, 3))

# Add custom layers
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.3)(x)
predictions = Dense(4, activation='softmax')(x)  # 4 classes

model = Model(inputs=base_model.input, outputs=predictions)

# Freeze base model
for layer in base_model.layers:
    layer.trainable = False

# Compile
model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])
model.summary()

history = model.fit(
    train,
    validation_data=val,
    epochs=10,
    steps_per_epoch=len(train),
    validation_steps=len(val)
)

loss, accuracy = model.evaluate(test, steps=len(test))
print(f"Test Accuracy: {accuracy:.4f}")
print(f"Test Loss: {loss:.4f}")

import matplotlib.pyplot as plt

# Accuracy
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()
plt.grid(True)
plt.show()

# Loss
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.show()

import numpy as np
pred = model.predict(test, steps=len(test), verbose=1)
pred2 = np.argmax(pred, axis=1)
y_test = test.classes

from sklearn.metrics import classification_report, accuracy_score

print(classification_report(y_test, pred2, target_names=test.class_indices.keys()))
print("Accuracy of the Model: {:.1f}%".format(accuracy_score(y_test, pred2) * 100))

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix
class_labels = list(test.class_indices.keys())
cm = confusion_matrix(y_test, pred2)
plt.figure(figsize=(10, 7))
sns.heatmap(cm, annot=True, fmt='g', cmap='Blues', xticklabels=class_labels, yticklabels=class_labels)

plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

model.save("Bloodcell.h5")

from google.colab import files

# Download the model to your local machine
files.download("Bloodcell.h5")